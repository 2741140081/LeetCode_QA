package com.marks.leetcode.binary_tree;

import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.*;

class LeetCode_3249Test {

    @Test
    void testCountGoodNodesExample1() {
        LeetCode_3249 solution = new LeetCode_3249();
        int[][] edges = {{0,1},{0,2},{1,3},{1,4},{2,5},{2,6}};
        int expected = 7;
        int actual = solution.countGoodNodes(edges);
        assertEquals(expected, actual);
    }

    @Test
    void testCountGoodNodesExample2() {
        LeetCode_3249 solution = new LeetCode_3249();
        int[][] edges = {{0,1},{1,2},{2,3},{3,4},{0,5},{1,6},{2,7},{3,8}};
        int expected = 6;
        int actual = solution.countGoodNodes(edges);
        assertEquals(expected, actual);
    }

    @Test
    void testCountGoodNodesSingleNode() {
        LeetCode_3249 solution = new LeetCode_3249();
        int[][] edges = {};
        int expected = 1;
        int actual = solution.countGoodNodes(edges);
        assertEquals(expected, actual);
    }

    @Test
    void testCountGoodNodesLinearTree() {
        LeetCode_3249 solution = new LeetCode_3249();
        int[][] edges = {{0,1},{1,2},{2,3}};
        int expected = 4; // Each node forms a valid subtree
        int actual = solution.countGoodNodes(edges);
        assertEquals(expected, actual);
    }

    @Test
    void testCountGoodNodesStarTree() {
        LeetCode_3249 solution = new LeetCode_3249();
        int[][] edges = {{0,1},{0,2},{0,3},{0,4}};
        int expected = 5; // All nodes should be good nodes
        int actual = solution.countGoodNodes(edges);
        assertEquals(expected, actual);
    }

    @Test
    void testCountGoodNodesLargeTree() {
        LeetCode_3249 solution = new LeetCode_3249();
        int[][] edges = {{815,0},{385,815},{320,385},{505,320},{417,505},{79,417},{100,79},{449,100},{180,449},{691,180},{248,180},{486,180},{348,100},{810,348},{816,348},{247,816},{178,247},{790,100},{433,790},{412,433},{489,412},{392,433},{271,79},{136,271},{554,136},{542,554},{520,542},{224,136},{408,224},{236,408},{487,136},{407,487},{105,487},{393,271},{242,393},{760,242},{189,760},{424,760},{549,760},{161,760},{523,242},{607,523},{653,607},{501,523},{232,523},{338,232},{92,523},{216,92},{706,393},{717,706},{281,717},{103,281},{226,103},{22,717},{12,22},{322,706},{719,322},{770,322},{779,322},{609,779},{698,271},{125,698},{771,125},{705,771},{759,705},{293,759},{531,293},{273,531},{137,293},{106,759},{696,106},{646,696},{47,646},{52,125},{570,52},{497,570},{445,570},{566,570},{421,570},{569,52},{801,569},{636,801},{228,801},{469,801},{53,125},{616,53},{482,616},{765,616},{671,616},{212,616},{237,53},{305,237},{471,305},{135,237},{7,135},{673,505},{686,673},{558,686},{65,558},{379,686},{95,379},{341,95},{626,379},{361,505},{147,361},{301,147},{518,301},{344,518},{430,344},{476,344},{145,518},{767,145},{794,145},{547,794},{160,547},{139,160},{466,139},{14,139},{297,794},{600,297},{419,297},{740,297},{683,740},{49,794},{166,518},{763,166},{233,763},{746,763},{431,166},{159,301},{285,505},{665,285},{780,285},{142,285},{10,320},{480,10},{672,480},{563,672},{36,563},{20,36},{390,563},{5,672},{56,672},{154,56},{144,56},{552,672},{777,552},{342,777},{677,342},{456,342},{690,342},{723,777},{373,723},{682,723},{721,723},{757,721},{453,757},{318,721},{115,721},{543,480},{749,543},{635,749},{604,543},{291,385},{164,291},{69,164},{709,69},{207,709},{637,207},{129,637},{88,129},{495,88},{169,495},{622,169},{599,495},{764,599},{766,764},{440,766},{171,440},{249,171},{209,249},{397,171},{165,397},{264,165},{603,165},{330,397},{39,330},{737,397},{258,737},{441,258},{61,766},{624,61},{116,624},{8,116},{381,116},{218,624},{535,218},{515,535},{580,624},{533,580},{280,533},{215,764},{287,215},{283,287},{336,283},{560,336},{601,283},{720,215},{795,720},{776,795},{459,720},{724,459},{59,215},{64,764},{44,64},{21,44},{389,21},{230,389},{470,230},{2,470},{102,2},{414,102},{507,414},{28,414},{71,28},{692,28},{444,102},{745,444},{573,745},{654,64},{517,654},{6,654},{362,654},{51,654},{640,654},{638,654},{132,654},{809,654},{532,654},{288,654},{111,654},{333,654},{750,654},{67,654},{807,654},{658,654},{593,654},{208,129},{615,208},{33,208},{670,208},{68,208},{54,208},{498,208},{509,208},{146,291},{437,146},{256,437},{101,256},{443,101},{1,443},{551,1},{425,551},{250,425},{3,551},{74,256},{350,74},{302,437},{588,302},{359,588},{416,359},{502,588},{413,502},{277,502},{442,502},{572,502},{726,502},{364,302},{434,364},{23,364},{499,146},{747,499},{585,747},{18,747},{66,747},{613,146},{736,613},{454,736},{321,454},{199,321},{227,199},{35,227},{548,199},{800,199},{298,800},{267,800},{812,321},{219,321},{488,454},{575,736},{629,575},{567,575},{457,567},{263,575},{541,263},{473,613},{619,473},{269,619},{510,269},{789,269},{243,269},{133,619},{455,133},{368,455},{663,455},{577,473},{296,577},{290,577},{90,290},{387,90},{684,387},{13,684},{323,387},{526,290},{536,385},{694,536},{259,694},{556,259},{4,536},{94,4},{201,94},{680,201},{458,680},{123,201},{57,123},{110,94},{778,110},{711,778},{727,711},{55,727},{24,55},{112,711},{474,112},{450,474},{268,4},{813,268},{186,813},{676,186},{660,186},{632,660},{332,813},{438,332},{372,332},{188,332},{155,268},{213,155},{650,155},{190,155},{378,268},{422,378},{113,422},{550,536},{802,550},{675,802},{352,550},{357,352},{436,357},{420,357},{522,420},{639,522},{369,639},{579,352},{415,579},{30,352},{220,30},{365,550},{276,365},{483,276},{628,483},{396,628},{260,396},{317,260},{96,317},{477,96},{803,477},{731,477},{411,477},{107,477},{539,317},{211,539},{718,211},{589,718},{11,718},{150,11},{642,396},{645,642},{428,645},{418,428},{126,418},{751,428},{48,751},{217,48},{491,645},{311,491},{289,491},{272,491},{394,491},{452,491},{775,276},{148,775},{631,148},{610,631},{141,631},{170,141},{630,631},{797,148},{584,797},{382,797},{353,797},{701,797},{319,797},{553,797},{590,797},{529,148},{679,775},{120,679},{591,120},{814,591},{27,120},{327,27},{786,327},{739,327},{485,327},{245,485},{91,27},{426,91},{504,426},{774,426},{537,426},{324,276},{87,324},{371,87},{163,87},{308,87},{404,87},{356,87},{50,87},{29,87},{244,87},{758,87},{667,87},{89,87},{481,87},{388,87},{386,87},{295,87},{376,87},{252,87},{681,87},{754,87},{254,87},{278,87},{605,87},{331,87},{490,87},{697,87},{714,87},{732,87},{326,87},{693,87},{282,536},{303,282},{156,303},{792,303},{432,792},{406,792},{306,792},{40,306},{63,303},{231,63},{334,231},{446,63},{581,446},{197,282},{565,197},{122,815},{627,122},{511,627},{347,511},{374,347},{104,374},{114,104},{475,104},{143,104},{15,104},{742,104},{203,104},{710,104},{524,104},{349,104},{503,104},{733,104},{239,104},{37,104},{544,104},{648,104},{284,104},{82,104},{702,104},{772,104},{43,104},{195,104},{448,104},{380,104},{339,104},{127,104},{130,104},{735,104},{176,104},{463,104},{725,104},{19,104},{769,104},{152,104},{234,104},{312,104},{304,104},{266,104},{257,104},{172,104},{592,104},{151,104},{366,104},{472,104},{315,104},{119,104},{479,104},{608,104},{806,104},{81,104},{647,104},{651,104},{200,104},{253,104},{223,104},{666,104},{595,104},{465,104},{205,104},{206,104},{611,104},{500,104},{41,104},{546,104},{229,104},{194,104},{614,104},{78,104},{118,104},{292,104},{124,104},{354,104},{621,104},{734,104},{80,104},{583,104},{46,104},{478,104},{235,104},{398,104},{435,104},{796,104},{555,104},{340,104},{528,104},{84,104},{109,104},{370,104},{715,104},{255,104},{409,104},{730,104},{768,104},{574,104},{744,104},{99,104},{86,104},{175,104},{661,104},{596,104},{270,104},{187,104},{240,104},{360,104},{251,104},{655,104},{519,104},{193,104},{316,104},{641,104},{791,104},{460,104},{45,104},{246,104},{314,104},{687,104},{688,104},{162,104},{265,104},{182,104},{713,104},{468,104},{401,104},{753,104},{633,104},{620,104},{325,104},{582,104},{181,104},{530,104},{606,104},{743,104},{423,104},{773,104},{712,104},{184,104},{699,104},{42,104},{707,104},{587,104},{222,104},{808,104},{762,104},{191,104},{157,104},{131,104},{16,104},{158,104},{168,104},{741,104},{784,104},{128,104},{335,104},{85,104},{703,104},{656,104},{214,104},{402,104},{275,104},{73,104},{177,104},{525,104},{70,104},{198,104},{93,104},{516,104},{439,104},{782,104},{467,104},{83,104},{345,104},{294,104},{238,104},{38,104},{179,104},{557,104},{363,104},{576,104},{309,104},{700,104},{804,104},{494,104},{657,104},{134,104},{708,104},{738,104},{669,104},{97,104},{427,104},{781,104},{375,104},{343,104},{34,104},{447,104},{210,104},{571,104},{451,104},{377,104},{755,104},{788,104},{351,122},{367,122},{674,367},{513,674},{328,674},{329,328},{534,329},{76,534},{612,76},{461,612},{685,461},{586,685},{728,586},{185,586},{58,76},{355,328},{623,367},{202,623},{722,202},{17,722},{598,722},{643,722},{121,722},{493,722},{562,722},{564,722},{299,722},{313,722},{496,722},{521,722},{174,722},{26,722},{594,722},{568,722},{60,722},{405,722},{75,722},{538,722},{618,722},{221,722},{752,722},{410,722},{662,722},{805,722},{506,722},{153,722},{716,722},{664,722},{429,722},{761,722},{811,722},{183,722},{652,722},{77,722},{196,722},{492,722},{783,722},{25,722},{346,722},{748,722},{358,722},{167,722},{149,722},{545,722},{617,722},{704,722},{173,722},{559,722},{462,722},{108,722},{225,722},{300,722},{484,722},{793,722},{689,722},{799,722},{798,722},{72,722},{756,722},{527,722},{395,722},{138,722},{625,722},{729,722},{286,722},{540,722},{307,722},{668,722},{274,722},{403,722},{678,722},{140,722},{508,722},{9,722},{578,722},{204,722},{391,722},{279,722},{261,722},{399,722},{400,722},{512,722},{384,722},{514,722},{98,722},{337,722},{659,722},{602,722},{62,722},{117,722},{32,722},{464,722},{383,722},{561,722},{31,722},{241,722},{262,722},{192,722},{649,722},{787,722},{597,722},{634,722},{310,722},{785,722},{695,722},{644,722}};
        int expected = 740;
        int actual = solution.countGoodNodes(edges);
        assertEquals(expected, actual);
    }
}